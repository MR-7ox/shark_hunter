// src/components/MapUI.jsx (FINAL DEBUGGED VERSION)

import React, { useState, useMemo, useEffect } from 'react';
import { MapContainer, TileLayer, GeoJSON, Marker, Popup, useMap, Polyline } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import { HotspotFrames, SharkTrack } from '../data/simData'; 
import L from 'leaflet';

// Fix default marker icons (required by Leaflet)
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
Â  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),
Â  iconUrl: require('leaflet/dist/images/marker-icon.png'),
Â  shadowUrl: require('leaflet/dist/images/marker-shadow.png'),
});

const defaultCenter = [39.0, -56.0]; // Centered near the Gulf Stream area
const defaultZoom = 6;

// --- Region Center Definitions ---
const regionCenters = {
Â  "North Atlantic": { center: [39.0, -56.0], zoom: 6 },
Â  "California Current": { center: [36.5, -122.0], zoom: 5 },
Â  "Mozambique Channel": { center: [-18.0, 41.0], zoom: 5 }
};

// --- Helper to Change Map View ---
function ChangeMapView({ center, zoom }) {
Â  const map = useMap();
Â  useEffect(() => {
Â  Â  map.setView(center, zoom);
Â  }, [center, zoom, map]);
Â  return null;
}

// --- Helper Functions ---

// 1. Color function based on model probability (P(Forage))
const getProbabilityColor = (prob) => {
Â  return prob > 0.8 ? '#a50026' : Â  // Dark Red (Critical Hotspot)
Â  Â  Â  Â  Â prob > 0.6 ? '#f46d43' : Â  // Orange (High Foraging)
Â  Â  Â  Â  Â prob > 0.4 ? '#fee090' : Â  // Yellow (Moderate Activity)
Â  Â  Â  Â  Â prob > 0.2 ? '#e0f3f8' : Â  // Light Blue (Low Activity)
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  '#4575b4'; Â  // Deep Blue (Transit)
};

// 2. Styling function for the Hotspot GeoJSON layer
const hotspotStyle = (feature) => {
Â  const probability = feature.properties.probability;
Â  return {
Â  Â  fillColor: getProbabilityColor(probability),
Â  Â  weight: 1,
Â  Â  opacity: 0.8,
Â  Â  color: '#000', // Outline color
Â  Â  fillOpacity: 0.75
Â  };
};

// --- Modal Content (Conceptual Tag) ---
const PaceTrackerTagContent = () => (
Â  Â  <div style={{ maxWidth: '300px' }}>
Â  Â  Â  Â  <h4>PACE-Tracker Tag Concept ðŸ¦ˆ</h4>
Â  Â  Â  Â  <p>This is our next-gen tag designed to validate the model in real-time:</p>
Â  Â  Â  Â  <ul>
Â  Â  Â  Â  Â  Â  <li>**Foraging Flag (Y=1):** **Internal pH Sensor** detects stomach acidity changes from feeding, providing instant proof of a kill.</li>
Â  Â  Â  Â  Â  Â  <li>**Dietary eDNA Sampler:** A microfluidic chamber collects water *only* when a feeding event is detected, allowing scientists to find the **DNA of the prey species** upon tag recovery.</li>
Â  Â  Â  Â  Â  Â  <li>**Real-time Link:** Transmits the 'Feeding Event' flag via Argos satellite, directly validating the map's red zones.</li>
Â  Â  Â  Â  </ul>
Â  Â  </div>
);


// --- Add API call function ---
async function fetchSharkPrediction(ocean, coords, features) {
Â  try {
Â  Â  const response = await fetch('http://127.0.0.1:5000/predict_sharks', {
Â  Â  Â  method: 'POST',
Â  Â  Â  headers: { 'Content-Type': 'application/json' },
Â  Â  Â  body: JSON.stringify([{ ocean, coords, features }])
Â  Â  });
Â  Â  return await response.json();
Â  } catch (err) {
Â  Â  return [{ error: err.message }];
Â  }
}

// --- Helper: Interpolate between two points for smooth animation ---
function interpolateCoords(start, end, t) {
Â  return [
Â  Â  start[0] + (end[0] - start[0]) * t,
Â  Â  start[1] + (end[1] - start[1]) * t
Â  ];
}

// --- Main Map Component ---

const MapUI = () => {
Â  // --- NEW: Region Selection State ---
Â  const [selectedRegion, setSelectedRegion] = useState('North Atlantic');

Â  // --- NEW: Animation Frame State ---
Â  const [currentFrameIndex, setCurrentFrameIndex] = useState(0);
Â  const totalFrames = HotspotFrames.length;

Â  // --- Animation Loop ---
Â  useEffect(() => {
Â  Â  const interval = setInterval(() => {
Â  Â  Â  setCurrentFrameIndex(prev => (prev + 1) % totalFrames);
Â  Â  }, 5000); // 5s per frame, 15s total for 3 frames
Â  Â  return () => clearInterval(interval);
Â  }, [totalFrames]);

Â  // --- Layer Toggles ---
Â  const [activeLayers, setActiveLayers] = useState({
Â  Â  hotspot: true,
Â  Â  swot: false,
Â  Â  pace: false,
Â  Â  modis: false
Â  });

Â  // --- Data Calculations ---
Â  const currentFrameData = useMemo(() => {
Â  Â  return HotspotFrames[currentFrameIndex];
Â  }, [currentFrameIndex]);

Â  const currentSharkPos = useMemo(() => {
Â  Â  const pos = SharkTrack.find(t => t.time === currentFrameIndex);
Â  Â  return pos || { lat: regionCenters[selectedRegion].center[0], lon: regionCenters[selectedRegion].center[1], status: 'Unknown' };
Â  }, [currentFrameIndex, selectedRegion]);

Â  // --- UI Handlers ---
Â  const toggleLayer = (layerName) => {
Â  Â  setActiveLayers(prev => ({ ...prev, [layerName]: !prev[layerName] }));
Â  };

Â  // Function to generate content for GeoJSON Popups (showing input data)
Â  const getModelNarrative = (cellData) => {
Â  Â  const prob = cellData.probability;
Â  Â  const { isAceCore, sstAnomaly, shearScore, phytoTypeScore } = cellData;
Â  Â  
Â  Â  let mainDriver = '';
Â  Â  if (isAceCore === 1) {
Â  Â  Â  mainDriver = `SWOT/MODIS: Strong Anticyclonic Eddy (ACE Core: ${isAceCore}, Temp Anomaly: +${sstAnomaly}Â°C).`;
Â  Â  } else if (shearScore > 0.5) {
Â  Â  Â  mainDriver = `SWOT: High current shear (${shearScore}) aggregating prey.`;
Â  Â  } else if (phytoTypeScore > 0.6) {
Â  Â  Â  mainDriver = `PACE: High food quality (${phytoTypeScore}) supporting food web.`;
Â  Â  } else {
Â  Â  Â  mainDriver = 'Low activity, no strong drivers.';
Â  Â  }

Â  Â  return (
Â  Â  Â  <>
Â  Â  Â  Â  **Predicted Foraging Probability:** <span style={{ color: getProbabilityColor(prob), fontWeight: 'bold' }}>{prob * 100}%</span>
Â  Â  Â  Â  <br/>**Model Status:** {prob > 0.6 ? 'ðŸš¨ CRITICAL HOTSPOT ZONE' : 'Low Activity'}
Â  Â  Â  Â  <br/>**Main Driver:** {mainDriver}
Â  Â  Â  Â  <br/>*(Click map to hide)*
Â  Â  Â  </>
Â  Â  );
Â  };
Â  
Â  // Dynamic Sidebar Text for Current Time
Â  const currentHotspotNarrative = currentSharkPos.status === 'Foraging' ? (
Â  Â  <p style={{ backgroundColor: '#fff3cd', padding: '10px', borderLeft: '3px solid #ffc107', fontWeight: 'bold' }}>
Â  Â  Â  **FORAGING HOTSPOT ALERT!** At this time, the model predicts high foraging (Red Zone). The shark is in this zone, driven by **SWOT** detecting a strong Anticyclonic Eddy.
Â  Â  </p>
Â  ) : (
Â  Â  <p>The shark is currently **{currentSharkPos.status.toLowerCase()}** in low-probability waters (Blue Zone). Environmental factors are not yet optimal for deep foraging.</p>
Â  );

Â  const [predictionResult, setPredictionResult] = useState(null);

Â  // --- Example: Call Flask API when region or frame changes ---
Â  useEffect(() => {
Â  Â  // Example features for demo; replace with real features as needed
Â  Â  const features = [1, 0.9, 1.8, 0.7];
Â  Â  const coords = [currentSharkPos.lat, currentSharkPos.lon];
Â  Â  const ocean = selectedRegion === "North Atlantic" ? "Atlantic" : "Indian Ocean";
Â  Â  fetchSharkPrediction(ocean, coords, features).then(setPredictionResult);
Â  }, [selectedRegion, currentFrameIndex]);

Â  // --- Shark Animation State ---
Â  const [animationProgress, setAnimationProgress] = useState(0);

Â  // --- Animation Effect (smooth transition between frames) ---
Â  useEffect(() => {
Â  Â  let frame = 0;
Â  Â  const steps = 50; // More steps = smoother
Â  Â  const interval = setInterval(() => {
Â  Â  Â  setAnimationProgress(frame / steps);
Â  Â  Â  frame++;
Â  Â  Â  if (frame > steps) frame = 0;
Â  Â  }, 100); // 100ms per step
Â  Â  return () => clearInterval(interval);
Â  }, [currentFrameIndex]);

Â  // --- Calculate animated position ---
Â  const prevFrame = SharkTrack.find(t => t.time === (currentFrameIndex === 0 ? totalFrames - 1 : currentFrameIndex - 1));
Â  const nextFrame = currentSharkPos;
Â  const animatedPos = prevFrame
Â  Â  ? interpolateCoords([prevFrame.lat, prevFrame.lon], [nextFrame.lat, nextFrame.lon], animationProgress)
Â  Â  : [currentSharkPos.lat, currentSharkPos.lon];

Â  // --- Shark Path Polyline ---
Â  const sharkPath = SharkTrack.slice(0, currentFrameIndex + 1).map(t => [t.lat, t.lon]);

Â  return (
Â  Â  <div style={{ height: '100vh', width: '100vw', display: 'flex' }}>
Â  Â  Â  
Â  Â  Â  {/* --- Sidebar for Controls and Explanations --- */}
Â  Â  Â  <div style={{ width: '25%', padding: '20px', backgroundColor: '#f0f0f0', overflowY: 'auto' }}>
Â  Â  Â  Â  <h2>Dynamic Shark Hotspot Model</h2>

Â  Â  Â  Â  {/* --- NEW: Ocean Region Selector --- */}
Â  Â  Â  Â  <h4>Select Ocean Region</h4>
Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  value={selectedRegion}
Â  Â  Â  Â  Â  onChange={e => setSelectedRegion(e.target.value)}
Â  Â  Â  Â  Â  style={{ width: '100%', padding: '8px', marginBottom: '15px' }}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <option value="North Atlantic">North Atlantic (Gulf Stream)</option>
Â  Â  Â  Â  Â  <option value="California Current">California Current (White Sharks)</option>
Â  Â  Â  Â  Â  <option value="Mozambique Channel">Mozambique Channel (Whale Sharks)</option>
Â  Â  Â  Â  </select>
Â  Â  Â  Â  <p>Selected Region: <strong>{selectedRegion}</strong></p>
Â  Â  Â  Â  <hr />

Â  Â  Â  Â  {/* --- Display Current Frame Index --- */}
Â  Â  Â  Â  <h4>Model Insight at T{currentFrameIndex}</h4>
Â  Â  Â  Â  {currentHotspotNarrative}
Â  Â  Â  Â  
Â  Â  Â  Â  <hr />

Â  Â  Â  Â  {/* --- Model Coefficients (The Math Explanation) --- */}
Â  Â  Â  Â  <h4>The Mathematical Link ($\beta$ Coefficients)</h4>
Â  Â  Â  Â  <p>Our model quantifies the influence of each NASA measurement:</p>
Â  Â  Â  Â  
Â  Â  Â  Â  <ul style={{ fontSize: '0.9em', listStyleType: 'none', paddingLeft: 0 }}>
Â  Â  Â  Â  Â  <li>**SWOT Eddy Core ($\beta_1 = +2.5$):** **The Primary Driver.** Being *inside* a warm eddy provides the crucial thermal refuge for deep foraging.</li>
Â  Â  Â  Â  Â  <li>**SWOT Shear ($\beta_2 = +1.5$):** **Prey Aggregator.** Strong currents concentrate food along fronts, making hunting efficient.</li>
Â  Â  Â  Â  Â  <li>**MODIS Anomaly ($\beta_3 = +1.0$):** **Thermal Indicator.** The hotter the water compared to normal, the more favorable the environment is.</li>
Â  Â  Â  Â  Â  <li>**PACE Phyto Score ($\beta_4 = +0.5$):** **Food Quality.** The health of the ecosystem's base layer supports the predicted biomass.</li>
Â  Â  Â  Â  </ul>
Â  Â  Â  Â  
Â  Â  Â  Â  <hr />
Â  Â  Â  Â  
Â  Â  Â  Â  {/* --- Input Layer Toggles --- */}
Â  Â  Â  Â  <h4>NASA Data Input Layers</h4>
Â  Â  Â  Â  <div className='layer-toggles'>
Â  Â  Â  Â  Â  <label><input type="checkbox" checked={activeLayers.hotspot} onChange={() => toggleLayer('hotspot')} /> **$P(\text{'Forage'})$ Prediction (Output)**</label><br />
Â  Â  Â  Â  Â  <label><input type="checkbox" checked={activeLayers.swot} onChange={() => toggleLayer('swot')} /> SWOT Eddy Tracker (SSHA/Shear)</label><br />
Â  Â  Â  Â  Â  <label><input type="checkbox" checked={activeLayers.pace} onChange={() => toggleLayer('pace')} /> PACE Phyto Mapper (Quality)</label><br />
Â  Â  Â  Â  Â  <label><input type="checkbox" checked={activeLayers.modis} onChange={() => toggleLayer('modis')} /> MODIS Temp Anomaly (Warmth)</label><br />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <hr />

Â  Â  Â  Â  <h4>Policy & Innovation</h4>
Â  Â  Â  Â  <p style={{fontSize: '0.9em'}}>
Â  Â  Â  Â  Â  Â  **Why it Matters:** This dynamic map enables **Dynamic Ocean Management (DOM)**â€”closing only the small Red Zones to fishing nets when the sharks are predicted to be foraging there, protecting them without shutting down vast ocean areas permanently.
Â  Â  Â  Â  </p>

Â  Â  Â  </div>
Â  Â  Â  
Â  Â  Â  {/* --- Map View --- */}
Â  Â  Â  <MapContainer 
Â  Â  Â  Â  center={regionCenters[selectedRegion].center} 
Â  Â  Â  Â  zoom={regionCenters[selectedRegion].zoom} 
Â  Â  Â  Â  style={{ height: '100vh', width: '75%' }}
Â  Â  Â  Â  scrollWheelZoom={true}
Â  Â  Â  >
Â  Â  Â  Â  {/* --- Change Map View on Region Change --- */}
Â  Â  Â  Â  <ChangeMapView center={regionCenters[selectedRegion].center} zoom={regionCenters[selectedRegion].zoom} />

Â  Â  Â  Â  <TileLayer
Â  Â  Â  Â  Â  attribution='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors | NASA PACE/SWOT Concept'
Â  Â  Â  Â  Â  url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
Â  Â  Â  Â  />

Â  Â  Â  Â  {/* 1. Dynamic Predictive Layer (GeoJSON) - Hotspot Layer */}
Â  Â  Â  Â  {activeLayers.hotspot && currentFrameData && (
Â  Â  Â  Â  Â  <GeoJSON 
Â  Â  Â  Â  Â  Â  Â  data={{ type: "FeatureCollection", features: currentFrameData.features }}
Â  Â  Â  Â  Â  Â  Â  style={hotspotStyle}
Â  Â  Â  Â  Â  Â  Â  onEachFeature={(feature, layer) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  layer.bindPopup(getModelNarrative(feature.properties));
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  )}
Â  Â  Â  Â  
Â  Â  Â  Â  {/* 2. Mock NASA Input Layers (Conceptual Visualization) */}
Â  Â  Â  Â  {/* SWOT Eddy Tracker: Uses ACE/Shear data from the properties */}
Â  Â  Â  Â  {activeLayers.swot && currentFrameData && (
Â  Â  Â  Â  Â  <GeoJSON 
Â  Â  Â  Â  Â  Â  data={{ type: "FeatureCollection", features: currentFrameData.features }}
Â  Â  Â  Â  Â  Â  style={(feature) => ({
Â  Â  Â  Â  Â  Â  Â  Â  fillColor: feature.properties.isAceCore === 1 ? '#e31a1c' : '#047bbf', // Red for ACE, Blue for non-ACE
Â  Â  Â  Â  Â  Â  Â  Â  fillOpacity: feature.properties.isAceCore === 1 ? 0.2 : 0.0,
Â  Â  Â  Â  Â  Â  Â  Â  color: '#e31a1c', 
Â  Â  Â  Â  Â  Â  Â  Â  weight: feature.properties.shearScore * 5, // Thicker line for high shear
Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  Â  pane="overlayPane"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  )}

Â  Â  Â  Â  {/* PACE Phyto Layer: Uses phytoTypeScore */}
Â  Â  Â  Â  {activeLayers.pace && currentFrameData && (
Â  Â  Â  Â  Â  <GeoJSON 
Â  Â  Â  Â  Â  Â  data={{ type: "FeatureCollection", features: currentFrameData.features }}
Â  Â  Â  Â  Â  Â  style={(feature) => ({
Â  Â  Â  Â  Â  Â  Â  Â  fillColor: `hsl(120, 100%, ${50 - (feature.properties.phytoTypeScore * 30)}%)`, // Green gradient
Â  Â  Â  Â  Â  Â  Â  Â  fillOpacity: feature.properties.phytoTypeScore,
Â  Â  Â  Â  Â  Â  Â  Â  color: 'transparent', 
Â  Â  Â  Â  Â  Â  Â  Â  weight: 0
Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  Â  pane="overlayPane"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  )}

Â  Â  Â  Â  {/* MODIS Temp Anomaly Layer: Uses sstAnomaly */}
Â  Â  Â  Â  {activeLayers.modis && currentFrameData && (
Â  Â  Â  Â  Â  <GeoJSON 
Â  Â  Â  Â  Â  Â  data={{ type: "FeatureCollection", features: currentFrameData.features }}
Â  Â  Â  Â  Â  Â  style={(feature) => ({
Â  Â  Â  Â  Â  Â  Â  Â  fillColor: feature.properties.sstAnomaly > 1.0 ? '#ffb74d' : '#81d4fa', // Warm vs Cool
Â  Â  Â  Â  Â  Â  Â  Â  fillOpacity: feature.properties.sstAnomaly * 0.4,
Â  Â  Â  Â  Â  Â  Â  Â  color: 'transparent', 
Â  Â  Â  Â  Â  Â  Â  Â  weight: 0
Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  Â  pane="overlayPane"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  )}
Â  Â  Â  Â  
Â  Â  Â  Â  {/* 4. Shark Animation Marker (The Ground Truth) */}
Â  Â  Â  Â  <Polyline positions={sharkPath} color="blue" weight={3} opacity={0.5} />
Â  Â  Â  Â  <Marker 
Â  Â  Â  Â  Â  Â  position={animatedPos} 
Â  Â  Â  Â  Â  Â  icon={L.divIcon({ 
Â  Â  Â  Â  Â  Â  Â  Â  className: 'shark-icon', 
Â  Â  Â  Â  Â  Â  Â  Â  html: '<span style="font-size: 30px;">ðŸ¦ˆ</span>', 
Â  Â  Â  Â  Â  Â  Â  Â  iconSize: [30, 30],
Â  Â  Â  Â  Â  Â  Â  Â  iconAnchor: [15, 30]
Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <Popup>
Â  Â  Â  Â  Â  Â  Â  Â  {/* 1. Actual status based on mock track */}
Â  Â  Â  Â  Â  Â  Â  Â  Shark ID: Lydia (Hypothetical)<br/>
Â  Â  Â  Â  Â  Â  Â  Â  Status: **{currentSharkPos.status}**<br/>
Â  Â  Â  Â  Â  Â  Â  Â  ---<br/>
Â  Â  Â  Â  Â  Â  Â  Â  {predictionResult && predictionResult[0] && !predictionResult[0].error && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <b>Model Probability:</b> {predictionResult[0].probability}<br/>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <b>Weather:</b> {predictionResult[0].features_used ? predictionResult[0].features_used.join(', ') : 'N/A'}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  {predictionResult && predictionResult[0] && predictionResult[0].error && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div style={{color: 'red'}}>Error: {predictionResult[0].error}</div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  <PaceTrackerTagContent />
Â  Â  Â  Â  Â  Â  </Popup>
Â  Â  Â  Â  </Marker>

Â  Â  Â  </MapContainer>
Â  Â  </div>
Â  );
};

export default MapUI;